; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\stm32f2xx_usart.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\output\stm32f2xx_usart.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\Inc -I..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Pfm6Ctrl\inc\app -I..\..\Pfm6Ctrl\src\wifi -I..\..\..\Utilities\FatFs_R0.09a -I.\RTE\_iap...PFM6 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -D__PFM6__ -DHSE_VALUE=25000000 -DWITH_COM_PORT --omf_browse=.\output\stm32f2xx_usart.crf ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_usart.c]
                          THUMB

                          AREA ||i.USART_ClearFlag||, CODE, READONLY, ALIGN=1

                  USART_ClearFlag PROC
;;;1326     */
;;;1327   void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  f4017200          AND      r2,r1,#0x200
;;;1328   {
;;;1329     /* Check the parameters */
;;;1330     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1331     assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
;;;1332   
;;;1333     /* The CTS flag is not available for UART4 and UART5 */
;;;1334     if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
000004  f5b27f00          CMP      r2,#0x200
000008  d100              BNE      |L1.12|
;;;1335     {
;;;1336       assert_param(IS_USART_1236_PERIPH(USARTx));
00000a  bf00              NOP      
                  |L1.12|
;;;1337     } 
;;;1338          
;;;1339     USARTx->SR = (uint16_t)~USART_FLAG;
00000c  43ca              MVNS     r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;1340   }
000010  4770              BX       lr
;;;1341   
                          ENDP


                          AREA ||i.USART_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  USART_ClearITPendingBit PROC
;;;1434     */
;;;1435   void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b510              PUSH     {r4,lr}
;;;1436   {
;;;1437     uint16_t bitpos = 0x00, itmask = 0x00;
000002  2200              MOVS     r2,#0
000004  2300              MOVS     r3,#0
;;;1438     /* Check the parameters */
;;;1439     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1440     assert_param(IS_USART_CLEAR_IT(USART_IT)); 
;;;1441   
;;;1442     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1443     if (USART_IT == USART_IT_CTS)
000006  f640146a          MOV      r4,#0x96a
00000a  42a1              CMP      r1,r4
00000c  d100              BNE      |L2.16|
;;;1444     {
;;;1445       assert_param(IS_USART_1236_PERIPH(USARTx));
00000e  bf00              NOP      
                  |L2.16|
;;;1446     } 
;;;1447       
;;;1448     bitpos = USART_IT >> 0x08;
000010  120a              ASRS     r2,r1,#8
;;;1449     itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
000012  2401              MOVS     r4,#1
000014  4094              LSLS     r4,r4,r2
000016  b2a3              UXTH     r3,r4
;;;1450     USARTx->SR = (uint16_t)~itmask;
000018  43dc              MVNS     r4,r3
00001a  8004              STRH     r4,[r0,#0]
;;;1451   }
00001c  bd10              POP      {r4,pc}
;;;1452   
                          ENDP


                          AREA ||i.USART_ClockInit||, CODE, READONLY, ALIGN=1

                  USART_ClockInit PROC
;;;365      */
;;;366    void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  b510              PUSH     {r4,lr}
;;;367    {
000002  4602              MOV      r2,r0
;;;368      uint32_t tmpreg = 0x00;
000004  2000              MOVS     r0,#0
;;;369      /* Check the parameters */
;;;370      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;371      assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
;;;372      assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
;;;373      assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
;;;374      assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
;;;375      
;;;376    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;377      tmpreg = USARTx->CR2;
000006  8a10              LDRH     r0,[r2,#0x10]
;;;378      /* Clear CLKEN, CPOL, CPHA and LBCL bits */
;;;379      tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
000008  f4206070          BIC      r0,r0,#0xf00
;;;380      /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
;;;381      /* Set CLKEN bit according to USART_Clock value */
;;;382      /* Set CPOL bit according to USART_CPOL value */
;;;383      /* Set CPHA bit according to USART_CPHA value */
;;;384      /* Set LBCL bit according to USART_LastBit value */
;;;385      tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
00000c  880b              LDRH     r3,[r1,#0]
00000e  884c              LDRH     r4,[r1,#2]
000010  4323              ORRS     r3,r3,r4
000012  888c              LDRH     r4,[r1,#4]
000014  4323              ORRS     r3,r3,r4
000016  88cc              LDRH     r4,[r1,#6]
000018  4323              ORRS     r3,r3,r4
00001a  4318              ORRS     r0,r0,r3
;;;386                     USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
;;;387      /* Write to USART CR2 */
;;;388      USARTx->CR2 = (uint16_t)tmpreg;
00001c  8210              STRH     r0,[r2,#0x10]
;;;389    }
00001e  bd10              POP      {r4,pc}
;;;390    
                          ENDP


                          AREA ||i.USART_ClockStructInit||, CODE, READONLY, ALIGN=1

                  USART_ClockStructInit PROC
;;;396      */
;;;397    void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
000000  2100              MOVS     r1,#0
;;;398    {
;;;399      /* USART_ClockInitStruct members default value */
;;;400      USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
000002  8001              STRH     r1,[r0,#0]
;;;401      USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
000004  8041              STRH     r1,[r0,#2]
;;;402      USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
000006  8081              STRH     r1,[r0,#4]
;;;403      USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;404    }
00000a  4770              BX       lr
;;;405    
                          ENDP


                          AREA ||i.USART_Cmd||, CODE, READONLY, ALIGN=1

                  USART_Cmd PROC
;;;413      */
;;;414    void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;415    {
;;;416      /* Check the parameters */
;;;417      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;418      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;419      
;;;420      if (NewState != DISABLE)
;;;421      {
;;;422        /* Enable the selected USART by setting the UE bit in the CR1 register */
;;;423        USARTx->CR1 |= USART_CR1_UE;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;424      }
;;;425      else
;;;426      {
;;;427        /* Disable the selected USART by clearing the UE bit in the CR1 register */
;;;428        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L5.22|
;;;429      }
;;;430    }
000016  4770              BX       lr
;;;431    
                          ENDP


                          AREA ||i.USART_DMACmd||, CODE, READONLY, ALIGN=1

                  USART_DMACmd PROC
;;;1085     */
;;;1086   void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L6.10|
;;;1087   {
;;;1088     /* Check the parameters */
;;;1089     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1090     assert_param(IS_USART_DMAREQ(USART_DMAReq));  
;;;1091     assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;1092   
;;;1093     if (NewState != DISABLE)
;;;1094     {
;;;1095       /* Enable the DMA transfer for selected requests by setting the DMAT and/or
;;;1096          DMAR bits in the USART CR3 register */
;;;1097       USARTx->CR3 |= USART_DMAReq;
000002  8a83              LDRH     r3,[r0,#0x14]
000004  430b              ORRS     r3,r3,r1
000006  8283              STRH     r3,[r0,#0x14]
000008  e002              B        |L6.16|
                  |L6.10|
;;;1098     }
;;;1099     else
;;;1100     {
;;;1101       /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
;;;1102          DMAR bits in the USART CR3 register */
;;;1103       USARTx->CR3 &= (uint16_t)~USART_DMAReq;
00000a  8a83              LDRH     r3,[r0,#0x14]
00000c  438b              BICS     r3,r3,r1
00000e  8283              STRH     r3,[r0,#0x14]
                  |L6.16|
;;;1104     }
;;;1105   }
000010  4770              BX       lr
;;;1106   
                          ENDP


                          AREA ||i.USART_DeInit||, CODE, READONLY, ALIGN=2

                  USART_DeInit PROC
;;;183      */
;;;184    void USART_DeInit(USART_TypeDef* USARTx)
000000  b510              PUSH     {r4,lr}
;;;185    {
000002  4604              MOV      r4,r0
;;;186      /* Check the parameters */
;;;187      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;188    
;;;189      if (USARTx == USART1)
000004  4825              LDR      r0,|L7.156|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L7.28|
;;;190      {
;;;191        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;192        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
000012  2100              MOVS     r1,#0
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e03e              B        |L7.154|
                  |L7.28|
;;;193      }
;;;194      else if (USARTx == USART2)
00001c  4820              LDR      r0,|L7.160|
00001e  4284              CMP      r4,r0
000020  d109              BNE      |L7.54|
;;;195      {
;;;196        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
000022  2101              MOVS     r1,#1
000024  0448              LSLS     r0,r1,#17
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;197        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  f44f3000          MOV      r0,#0x20000
000030  f7fffffe          BL       RCC_APB1PeriphResetCmd
000034  e031              B        |L7.154|
                  |L7.54|
;;;198      }
;;;199      else if (USARTx == USART3)
000036  481b              LDR      r0,|L7.164|
000038  4284              CMP      r4,r0
00003a  d109              BNE      |L7.80|
;;;200      {
;;;201        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
00003c  2101              MOVS     r1,#1
00003e  0488              LSLS     r0,r1,#18
000040  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;202        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
000044  2100              MOVS     r1,#0
000046  f44f2080          MOV      r0,#0x40000
00004a  f7fffffe          BL       RCC_APB1PeriphResetCmd
00004e  e024              B        |L7.154|
                  |L7.80|
;;;203      }    
;;;204      else if (USARTx == UART4)
000050  4815              LDR      r0,|L7.168|
000052  4284              CMP      r4,r0
000054  d109              BNE      |L7.106|
;;;205      {
;;;206        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
000056  2101              MOVS     r1,#1
000058  04c8              LSLS     r0,r1,#19
00005a  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;207        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
00005e  2100              MOVS     r1,#0
000060  f44f2000          MOV      r0,#0x80000
000064  f7fffffe          BL       RCC_APB1PeriphResetCmd
000068  e017              B        |L7.154|
                  |L7.106|
;;;208      }
;;;209      else if (USARTx == UART5)
00006a  4810              LDR      r0,|L7.172|
00006c  4284              CMP      r4,r0
00006e  d109              BNE      |L7.132|
;;;210      {
;;;211        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
000070  2101              MOVS     r1,#1
000072  0508              LSLS     r0,r1,#20
000074  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;212        RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
000078  2100              MOVS     r1,#0
00007a  f44f1080          MOV      r0,#0x100000
00007e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000082  e00a              B        |L7.154|
                  |L7.132|
;;;213      }     
;;;214      else
;;;215      {
;;;216        if (USARTx == USART6)
000084  480a              LDR      r0,|L7.176|
000086  4284              CMP      r4,r0
000088  d107              BNE      |L7.154|
;;;217        { 
;;;218          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
00008a  2101              MOVS     r1,#1
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;219          RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
000092  2100              MOVS     r1,#0
000094  2020              MOVS     r0,#0x20
000096  f7fffffe          BL       RCC_APB2PeriphResetCmd
                  |L7.154|
;;;220        }
;;;221      }
;;;222    }
00009a  bd10              POP      {r4,pc}
;;;223    
                          ENDP

                  |L7.156|
                          DCD      0x40011000
                  |L7.160|
                          DCD      0x40004400
                  |L7.164|
                          DCD      0x40004800
                  |L7.168|
                          DCD      0x40004c00
                  |L7.172|
                          DCD      0x40005000
                  |L7.176|
                          DCD      0x40011400

                          AREA ||i.USART_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  USART_GetFlagStatus PROC
;;;1277     */
;;;1278   FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
000000  4602              MOV      r2,r0
;;;1279   {
;;;1280     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1281     /* Check the parameters */
;;;1282     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1283     assert_param(IS_USART_FLAG(USART_FLAG));
;;;1284   
;;;1285     /* The CTS flag is not available for UART4 and UART5 */
;;;1286     if (USART_FLAG == USART_FLAG_CTS)
000004  f5b17f00          CMP      r1,#0x200
000008  d100              BNE      |L8.12|
;;;1287     {
;;;1288       assert_param(IS_USART_1236_PERIPH(USARTx));
00000a  bf00              NOP      
                  |L8.12|
;;;1289     } 
;;;1290       
;;;1291     if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
00000c  8813              LDRH     r3,[r2,#0]
00000e  400b              ANDS     r3,r3,r1
000010  b10b              CBZ      r3,|L8.22|
;;;1292     {
;;;1293       bitstatus = SET;
000012  2001              MOVS     r0,#1
000014  e000              B        |L8.24|
                  |L8.22|
;;;1294     }
;;;1295     else
;;;1296     {
;;;1297       bitstatus = RESET;
000016  2000              MOVS     r0,#0
                  |L8.24|
;;;1298     }
;;;1299     return bitstatus;
;;;1300   }
000018  4770              BX       lr
;;;1301   
                          ENDP


                          AREA ||i.USART_GetITStatus||, CODE, READONLY, ALIGN=1

                  USART_GetITStatus PROC
;;;1360     */
;;;1361   ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1362   {
000002  4602              MOV      r2,r0
;;;1363     uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
000004  2400              MOVS     r4,#0
000006  2300              MOVS     r3,#0
000008  2500              MOVS     r5,#0
;;;1364     ITStatus bitstatus = RESET;
00000a  2000              MOVS     r0,#0
;;;1365     /* Check the parameters */
;;;1366     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1367     assert_param(IS_USART_GET_IT(USART_IT)); 
;;;1368   
;;;1369     /* The CTS interrupt is not available for UART4 and UART5 */ 
;;;1370     if (USART_IT == USART_IT_CTS)
00000c  f640166a          MOV      r6,#0x96a
000010  42b1              CMP      r1,r6
000012  d100              BNE      |L9.22|
;;;1371     {
;;;1372       assert_param(IS_USART_1236_PERIPH(USARTx));
000014  bf00              NOP      
                  |L9.22|
;;;1373     } 
;;;1374       
;;;1375     /* Get the USART register index */
;;;1376     usartreg = (((uint8_t)USART_IT) >> 0x05);
000016  f3c11542          UBFX     r5,r1,#5,#3
;;;1377     /* Get the interrupt position */
;;;1378     itmask = USART_IT & IT_MASK;
00001a  f001031f          AND      r3,r1,#0x1f
;;;1379     itmask = (uint32_t)0x01 << itmask;
00001e  2601              MOVS     r6,#1
000020  fa06f303          LSL      r3,r6,r3
;;;1380     
;;;1381     if (usartreg == 0x01) /* The IT  is in CR1 register */
000024  2d01              CMP      r5,#1
000026  d102              BNE      |L9.46|
;;;1382     {
;;;1383       itmask &= USARTx->CR1;
000028  8996              LDRH     r6,[r2,#0xc]
00002a  4033              ANDS     r3,r3,r6
00002c  e006              B        |L9.60|
                  |L9.46|
;;;1384     }
;;;1385     else if (usartreg == 0x02) /* The IT  is in CR2 register */
00002e  2d02              CMP      r5,#2
000030  d102              BNE      |L9.56|
;;;1386     {
;;;1387       itmask &= USARTx->CR2;
000032  8a16              LDRH     r6,[r2,#0x10]
000034  4033              ANDS     r3,r3,r6
000036  e001              B        |L9.60|
                  |L9.56|
;;;1388     }
;;;1389     else /* The IT  is in CR3 register */
;;;1390     {
;;;1391       itmask &= USARTx->CR3;
000038  8a96              LDRH     r6,[r2,#0x14]
00003a  4033              ANDS     r3,r3,r6
                  |L9.60|
;;;1392     }
;;;1393     
;;;1394     bitpos = USART_IT >> 0x08;
00003c  120c              ASRS     r4,r1,#8
;;;1395     bitpos = (uint32_t)0x01 << bitpos;
00003e  2601              MOVS     r6,#1
000040  fa06f404          LSL      r4,r6,r4
;;;1396     bitpos &= USARTx->SR;
000044  8816              LDRH     r6,[r2,#0]
000046  4034              ANDS     r4,r4,r6
;;;1397     if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
000048  b113              CBZ      r3,|L9.80|
00004a  b10c              CBZ      r4,|L9.80|
;;;1398     {
;;;1399       bitstatus = SET;
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L9.82|
                  |L9.80|
;;;1400     }
;;;1401     else
;;;1402     {
;;;1403       bitstatus = RESET;
000050  2000              MOVS     r0,#0
                  |L9.82|
;;;1404     }
;;;1405     
;;;1406     return bitstatus;  
;;;1407   }
000052  bd70              POP      {r4-r6,pc}
;;;1408   
                          ENDP


                          AREA ||i.USART_HalfDuplexCmd||, CODE, READONLY, ALIGN=1

                  USART_HalfDuplexCmd PROC
;;;821      */
;;;822    void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L10.12|
;;;823    {
;;;824      /* Check the parameters */
;;;825      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;826      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;827      
;;;828      if (NewState != DISABLE)
;;;829      {
;;;830        /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
;;;831        USARTx->CR3 |= USART_CR3_HDSEL;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420208          ORR      r2,r2,#8
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L10.22|
                  |L10.12|
;;;832      }
;;;833      else
;;;834      {
;;;835        /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
;;;836        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73f7          MOV      r3,#0xfff7
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L10.22|
;;;837      }
;;;838    }
000016  4770              BX       lr
;;;839    
                          ENDP


                          AREA ||i.USART_ITConfig||, CODE, READONLY, ALIGN=1

                  USART_ITConfig PROC
;;;1213     */
;;;1214   void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1215   {
000002  4603              MOV      r3,r0
;;;1216     uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
000004  2400              MOVS     r4,#0
000006  2600              MOVS     r6,#0
000008  2500              MOVS     r5,#0
;;;1217     uint32_t usartxbase = 0x00;
00000a  2000              MOVS     r0,#0
;;;1218     /* Check the parameters */
;;;1219     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1220     assert_param(IS_USART_CONFIG_IT(USART_IT));
;;;1221     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1222   
;;;1223     /* The CTS interrupt is not available for UART4 and UART5 */
;;;1224     if (USART_IT == USART_IT_CTS)
00000c  f640176a          MOV      r7,#0x96a
000010  42b9              CMP      r1,r7
000012  d100              BNE      |L11.22|
;;;1225     {
;;;1226       assert_param(IS_USART_1236_PERIPH(USARTx));
000014  bf00              NOP      
                  |L11.22|
;;;1227     } 
;;;1228       
;;;1229     usartxbase = (uint32_t)USARTx;
000016  4618              MOV      r0,r3
;;;1230   
;;;1231     /* Get the USART register index */
;;;1232     usartreg = (((uint8_t)USART_IT) >> 0x05);
000018  f3c11442          UBFX     r4,r1,#5,#3
;;;1233   
;;;1234     /* Get the interrupt position */
;;;1235     itpos = USART_IT & IT_MASK;
00001c  f001061f          AND      r6,r1,#0x1f
;;;1236     itmask = (((uint32_t)0x01) << itpos);
000020  2701              MOVS     r7,#1
000022  fa07f506          LSL      r5,r7,r6
;;;1237       
;;;1238     if (usartreg == 0x01) /* The IT is in CR1 register */
000026  2c01              CMP      r4,#1
000028  d101              BNE      |L11.46|
;;;1239     {
;;;1240       usartxbase += 0x0C;
00002a  300c              ADDS     r0,r0,#0xc
00002c  e004              B        |L11.56|
                  |L11.46|
;;;1241     }
;;;1242     else if (usartreg == 0x02) /* The IT is in CR2 register */
00002e  2c02              CMP      r4,#2
000030  d101              BNE      |L11.54|
;;;1243     {
;;;1244       usartxbase += 0x10;
000032  3010              ADDS     r0,r0,#0x10
000034  e000              B        |L11.56|
                  |L11.54|
;;;1245     }
;;;1246     else /* The IT is in CR3 register */
;;;1247     {
;;;1248       usartxbase += 0x14; 
000036  3014              ADDS     r0,r0,#0x14
                  |L11.56|
;;;1249     }
;;;1250     if (NewState != DISABLE)
000038  b11a              CBZ      r2,|L11.66|
;;;1251     {
;;;1252       *(__IO uint32_t*)usartxbase  |= itmask;
00003a  6807              LDR      r7,[r0,#0]
00003c  432f              ORRS     r7,r7,r5
00003e  6007              STR      r7,[r0,#0]
000040  e002              B        |L11.72|
                  |L11.66|
;;;1253     }
;;;1254     else
;;;1255     {
;;;1256       *(__IO uint32_t*)usartxbase &= ~itmask;
000042  6807              LDR      r7,[r0,#0]
000044  43af              BICS     r7,r7,r5
000046  6007              STR      r7,[r0,#0]
                  |L11.72|
;;;1257     }
;;;1258   }
000048  bdf0              POP      {r4-r7,pc}
;;;1259   
                          ENDP


                          AREA ||i.USART_Init||, CODE, READONLY, ALIGN=2

                  USART_Init PROC
;;;232      */
;;;233    void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;234    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;235      uint32_t tmpreg = 0x00, apbclock = 0x00;
000008  2400              MOVS     r4,#0
00000a  46a1              MOV      r9,r4
;;;236      uint32_t integerdivider = 0x00;
00000c  bf00              NOP      
;;;237      uint32_t fractionaldivider = 0x00;
00000e  46a0              MOV      r8,r4
;;;238      RCC_ClocksTypeDef RCC_ClocksStatus;
;;;239    
;;;240      /* Check the parameters */
;;;241      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;242      assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
;;;243      assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
;;;244      assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
;;;245      assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
;;;246      assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
;;;247      assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
;;;248    
;;;249      /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
;;;250      if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
000010  89b0              LDRH     r0,[r6,#0xc]
000012  b100              CBZ      r0,|L12.22|
;;;251      {
;;;252        assert_param(IS_USART_1236_PERIPH(USARTx));
000014  bf00              NOP      
                  |L12.22|
;;;253      }
;;;254    
;;;255    /*---------------------------- USART CR2 Configuration -----------------------*/
;;;256      tmpreg = USARTx->CR2;
000016  8a2c              LDRH     r4,[r5,#0x10]
;;;257    
;;;258      /* Clear STOP[13:12] bits */
;;;259      tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
000018  f4245440          BIC      r4,r4,#0x3000
;;;260    
;;;261      /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
;;;262          Set STOP[13:12] bits according to USART_StopBits value */
;;;263      tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
00001c  88f0              LDRH     r0,[r6,#6]
00001e  4304              ORRS     r4,r4,r0
;;;264      
;;;265      /* Write to USART CR2 */
;;;266      USARTx->CR2 = (uint16_t)tmpreg;
000020  822c              STRH     r4,[r5,#0x10]
;;;267    
;;;268    /*---------------------------- USART CR1 Configuration -----------------------*/
;;;269      tmpreg = USARTx->CR1;
000022  89ac              LDRH     r4,[r5,#0xc]
;;;270    
;;;271      /* Clear M, PCE, PS, TE and RE bits */
;;;272      tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
000024  f241600c          MOV      r0,#0x160c
000028  4384              BICS     r4,r4,r0
;;;273    
;;;274      /* Configure the USART Word Length, Parity and mode: 
;;;275         Set the M bits according to USART_WordLength value 
;;;276         Set PCE and PS bits according to USART_Parity value
;;;277         Set TE and RE bits according to USART_Mode value */
;;;278      tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
00002a  88b0              LDRH     r0,[r6,#4]
00002c  8931              LDRH     r1,[r6,#8]
00002e  4308              ORRS     r0,r0,r1
000030  8971              LDRH     r1,[r6,#0xa]
000032  4308              ORRS     r0,r0,r1
000034  4304              ORRS     r4,r4,r0
;;;279                USART_InitStruct->USART_Mode;
;;;280    
;;;281      /* Write to USART CR1 */
;;;282      USARTx->CR1 = (uint16_t)tmpreg;
000036  81ac              STRH     r4,[r5,#0xc]
;;;283    
;;;284    /*---------------------------- USART CR3 Configuration -----------------------*/  
;;;285      tmpreg = USARTx->CR3;
000038  8aac              LDRH     r4,[r5,#0x14]
;;;286    
;;;287      /* Clear CTSE and RTSE bits */
;;;288      tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
00003a  f4247440          BIC      r4,r4,#0x300
;;;289    
;;;290      /* Configure the USART HFC : 
;;;291          Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
;;;292      tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
00003e  89b0              LDRH     r0,[r6,#0xc]
000040  4304              ORRS     r4,r4,r0
;;;293    
;;;294      /* Write to USART CR3 */
;;;295      USARTx->CR3 = (uint16_t)tmpreg;
000042  82ac              STRH     r4,[r5,#0x14]
;;;296    
;;;297    /*---------------------------- USART BRR Configuration -----------------------*/
;;;298      /* Configure the USART Baud Rate */
;;;299      RCC_GetClocksFreq(&RCC_ClocksStatus);
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       RCC_GetClocksFreq
;;;300    
;;;301      if ((USARTx == USART1) || (USARTx == USART6))
00004a  4820              LDR      r0,|L12.204|
00004c  4285              CMP      r5,r0
00004e  d002              BEQ      |L12.86|
000050  481f              LDR      r0,|L12.208|
000052  4285              CMP      r5,r0
000054  d102              BNE      |L12.92|
                  |L12.86|
;;;302      {
;;;303        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000056  f8dd900c          LDR      r9,[sp,#0xc]
00005a  e001              B        |L12.96|
                  |L12.92|
;;;304      }
;;;305      else
;;;306      {
;;;307        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
00005c  f8dd9008          LDR      r9,[sp,#8]
                  |L12.96|
;;;308      }
;;;309      
;;;310      /* Determine the integer part */
;;;311      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
000060  89a8              LDRH     r0,[r5,#0xc]
000062  f4004000          AND      r0,r0,#0x8000
000066  b140              CBZ      r0,|L12.122|
;;;312      {
;;;313        /* Integer part computing in case Oversampling mode is 8 Samples */
;;;314        integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
000068  eb0900c9          ADD      r0,r9,r9,LSL #3
00006c  eb001009          ADD      r0,r0,r9,LSL #4
000070  6831              LDR      r1,[r6,#0]
000072  0049              LSLS     r1,r1,#1
000074  fbb0f7f1          UDIV     r7,r0,r1
000078  e007              B        |L12.138|
                  |L12.122|
;;;315      }
;;;316      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;317      {
;;;318        /* Integer part computing in case Oversampling mode is 16 Samples */
;;;319        integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
00007a  eb0900c9          ADD      r0,r9,r9,LSL #3
00007e  eb001009          ADD      r0,r0,r9,LSL #4
000082  6831              LDR      r1,[r6,#0]
000084  0089              LSLS     r1,r1,#2
000086  fbb0f7f1          UDIV     r7,r0,r1
                  |L12.138|
;;;320      }
;;;321      tmpreg = (integerdivider / 100) << 4;
00008a  2064              MOVS     r0,#0x64
00008c  fbb7f0f0          UDIV     r0,r7,r0
000090  0104              LSLS     r4,r0,#4
;;;322    
;;;323      /* Determine the fractional part */
;;;324      fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
000092  0920              LSRS     r0,r4,#4
000094  2164              MOVS     r1,#0x64
000096  fb017810          MLS      r8,r1,r0,r7
;;;325    
;;;326      /* Implement the fractional part in the register */
;;;327      if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
00009a  89a8              LDRH     r0,[r5,#0xc]
00009c  f4004000          AND      r0,r0,#0x8000
0000a0  b140              CBZ      r0,|L12.180|
;;;328      {
;;;329        tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
0000a2  2032              MOVS     r0,#0x32
0000a4  eb0000c8          ADD      r0,r0,r8,LSL #3
0000a8  fbb0f0f1          UDIV     r0,r0,r1
0000ac  f0000007          AND      r0,r0,#7
0000b0  4304              ORRS     r4,r4,r0
0000b2  e008              B        |L12.198|
                  |L12.180|
;;;330      }
;;;331      else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;332      {
;;;333        tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
0000b4  2032              MOVS     r0,#0x32
0000b6  eb001008          ADD      r0,r0,r8,LSL #4
0000ba  2164              MOVS     r1,#0x64
0000bc  fbb0f0f1          UDIV     r0,r0,r1
0000c0  f000000f          AND      r0,r0,#0xf
0000c4  4304              ORRS     r4,r4,r0
                  |L12.198|
;;;334      }
;;;335      
;;;336      /* Write to USART BRR register */
;;;337      USARTx->BRR = (uint16_t)tmpreg;
0000c6  812c              STRH     r4,[r5,#8]
;;;338    }
0000c8  e8bd87ff          POP      {r0-r10,pc}
;;;339    
                          ENDP

                  |L12.204|
                          DCD      0x40011000
                  |L12.208|
                          DCD      0x40011400

                          AREA ||i.USART_IrDACmd||, CODE, READONLY, ALIGN=1

                  USART_IrDACmd PROC
;;;1039     */
;;;1040   void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L13.12|
;;;1041   {
;;;1042     /* Check the parameters */
;;;1043     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1044     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1045       
;;;1046     if (NewState != DISABLE)
;;;1047     {
;;;1048       /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
;;;1049       USARTx->CR3 |= USART_CR3_IREN;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420202          ORR      r2,r2,#2
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L13.22|
                  |L13.12|
;;;1050     }
;;;1051     else
;;;1052     {
;;;1053       /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
;;;1054       USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L13.22|
;;;1055     }
;;;1056   }
000016  4770              BX       lr
;;;1057   
                          ENDP


                          AREA ||i.USART_IrDAConfig||, CODE, READONLY, ALIGN=1

                  USART_IrDAConfig PROC
;;;1021     */
;;;1022   void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
000000  8a82              LDRH     r2,[r0,#0x14]
;;;1023   {
;;;1024     /* Check the parameters */
;;;1025     assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;1026     assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
;;;1027       
;;;1028     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
000002  f64f73fb          MOV      r3,#0xfffb
000006  401a              ANDS     r2,r2,r3
000008  8282              STRH     r2,[r0,#0x14]
;;;1029     USARTx->CR3 |= USART_IrDAMode;
00000a  8a82              LDRH     r2,[r0,#0x14]
00000c  430a              ORRS     r2,r2,r1
00000e  8282              STRH     r2,[r0,#0x14]
;;;1030   }
000010  4770              BX       lr
;;;1031   
                          ENDP


                          AREA ||i.USART_LINBreakDetectLengthConfig||, CODE, READONLY, ALIGN=1

                  USART_LINBreakDetectLengthConfig PROC
;;;726      */
;;;727    void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;728    {
;;;729      /* Check the parameters */
;;;730      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;731      assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
;;;732      
;;;733      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
000002  f64f73df          MOV      r3,#0xffdf
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;734      USARTx->CR2 |= USART_LINBreakDetectLength;  
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;735    }
000010  4770              BX       lr
;;;736    
                          ENDP


                          AREA ||i.USART_LINCmd||, CODE, READONLY, ALIGN=1

                  USART_LINCmd PROC
;;;744      */
;;;745    void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L16.12|
;;;746    {
;;;747      /* Check the parameters */
;;;748      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;749      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;750      
;;;751      if (NewState != DISABLE)
;;;752      {
;;;753        /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
;;;754        USARTx->CR2 |= USART_CR2_LINEN;
000002  8a02              LDRH     r2,[r0,#0x10]
000004  f4424280          ORR      r2,r2,#0x4000
000008  8202              STRH     r2,[r0,#0x10]
00000a  e004              B        |L16.22|
                  |L16.12|
;;;755      }
;;;756      else
;;;757      {
;;;758        /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
;;;759        USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
00000c  8a02              LDRH     r2,[r0,#0x10]
00000e  f64b73ff          MOV      r3,#0xbfff
000012  401a              ANDS     r2,r2,r3
000014  8202              STRH     r2,[r0,#0x10]
                  |L16.22|
;;;760      }
;;;761    }
000016  4770              BX       lr
;;;762    
                          ENDP


                          AREA ||i.USART_OneBitMethodCmd||, CODE, READONLY, ALIGN=1

                  USART_OneBitMethodCmd PROC
;;;486      */
;;;487    void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L17.12|
;;;488    {
;;;489      /* Check the parameters */
;;;490      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;491      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;492      
;;;493      if (NewState != DISABLE)
;;;494      {
;;;495        /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
;;;496        USARTx->CR3 |= USART_CR3_ONEBIT;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f4426200          ORR      r2,r2,#0x800
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L17.22|
                  |L17.12|
;;;497      }
;;;498      else
;;;499      {
;;;500        /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
;;;501        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f24f73ff          MOV      r3,#0xf7ff
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L17.22|
;;;502      }
;;;503    }
000016  4770              BX       lr
;;;504    
                          ENDP


                          AREA ||i.USART_OverSampling8Cmd||, CODE, READONLY, ALIGN=1

                  USART_OverSampling8Cmd PROC
;;;460      */
;;;461    void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L18.12|
;;;462    {
;;;463      /* Check the parameters */
;;;464      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;465      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;466      
;;;467      if (NewState != DISABLE)
;;;468      {
;;;469        /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
;;;470        USARTx->CR1 |= USART_CR1_OVER8;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f4424200          ORR      r2,r2,#0x8000
000008  8182              STRH     r2,[r0,#0xc]
00000a  e003              B        |L18.20|
                  |L18.12|
;;;471      }
;;;472      else
;;;473      {
;;;474        /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
;;;475        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f3c2020e          UBFX     r2,r2,#0,#15
000012  8182              STRH     r2,[r0,#0xc]
                  |L18.20|
;;;476      }
;;;477    }  
000014  4770              BX       lr
;;;478    
                          ENDP


                          AREA ||i.USART_ReceiveData||, CODE, READONLY, ALIGN=1

                  USART_ReceiveData PROC
;;;559      */
;;;560    uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
000000  4601              MOV      r1,r0
;;;561    {
;;;562      /* Check the parameters */
;;;563      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;564      
;;;565      /* Receive Data */
;;;566      return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
000002  8888              LDRH     r0,[r1,#4]
000004  f3c00008          UBFX     r0,r0,#0,#9
;;;567    }
000008  4770              BX       lr
;;;568    
                          ENDP


                          AREA ||i.USART_ReceiverWakeUpCmd||, CODE, READONLY, ALIGN=1

                  USART_ReceiverWakeUpCmd PROC
;;;630      */
;;;631    void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L20.12|
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;635      assert_param(IS_FUNCTIONAL_STATE(NewState)); 
;;;636      
;;;637      if (NewState != DISABLE)
;;;638      {
;;;639        /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
;;;640        USARTx->CR1 |= USART_CR1_RWU;
000002  8982              LDRH     r2,[r0,#0xc]
000004  f0420202          ORR      r2,r2,#2
000008  8182              STRH     r2,[r0,#0xc]
00000a  e004              B        |L20.22|
                  |L20.12|
;;;641      }
;;;642      else
;;;643      {
;;;644        /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
;;;645        USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
00000c  8982              LDRH     r2,[r0,#0xc]
00000e  f64f73fd          MOV      r3,#0xfffd
000012  401a              ANDS     r2,r2,r3
000014  8182              STRH     r2,[r0,#0xc]
                  |L20.22|
;;;646      }
;;;647    }
000016  4770              BX       lr
;;;648    /**
                          ENDP


                          AREA ||i.USART_SendBreak||, CODE, READONLY, ALIGN=1

                  USART_SendBreak PROC
;;;768      */
;;;769    void USART_SendBreak(USART_TypeDef* USARTx)
000000  8981              LDRH     r1,[r0,#0xc]
;;;770    {
;;;771      /* Check the parameters */
;;;772      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;773      
;;;774      /* Send break characters */
;;;775      USARTx->CR1 |= USART_CR1_SBK;
000002  f0410101          ORR      r1,r1,#1
000006  8181              STRH     r1,[r0,#0xc]
;;;776    }
000008  4770              BX       lr
;;;777    
                          ENDP


                          AREA ||i.USART_SendData||, CODE, READONLY, ALIGN=1

                  USART_SendData PROC
;;;543      */
;;;544    void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
000000  f3c10208          UBFX     r2,r1,#0,#9
;;;545    {
;;;546      /* Check the parameters */
;;;547      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;548      assert_param(IS_USART_DATA(Data)); 
;;;549        
;;;550      /* Transmit Data */
;;;551      USARTx->DR = (Data & (uint16_t)0x01FF);
000004  8082              STRH     r2,[r0,#4]
;;;552    }
000006  4770              BX       lr
;;;553    
                          ENDP


                          AREA ||i.USART_SetAddress||, CODE, READONLY, ALIGN=1

                  USART_SetAddress PROC
;;;610      */
;;;611    void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
000000  8a02              LDRH     r2,[r0,#0x10]
;;;612    {
;;;613      /* Check the parameters */
;;;614      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;615      assert_param(IS_USART_ADDRESS(USART_Address)); 
;;;616        
;;;617      /* Clear the USART address */
;;;618      USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
000002  f64f73f0          MOV      r3,#0xfff0
000006  401a              ANDS     r2,r2,r3
000008  8202              STRH     r2,[r0,#0x10]
;;;619      /* Set the USART address node */
;;;620      USARTx->CR2 |= USART_Address;
00000a  8a02              LDRH     r2,[r0,#0x10]
00000c  430a              ORRS     r2,r2,r1
00000e  8202              STRH     r2,[r0,#0x10]
;;;621    }
000010  4770              BX       lr
;;;622    
                          ENDP


                          AREA ||i.USART_SetGuardTime||, CODE, READONLY, ALIGN=1

                  USART_SetGuardTime PROC
;;;906      */
;;;907    void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;908    {    
;;;909      /* Check the parameters */
;;;910      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;911      
;;;912      /* Clear the USART Guard time */
;;;913      USARTx->GTPR &= USART_GTPR_PSC;
000002  b2d2              UXTB     r2,r2
000004  8302              STRH     r2,[r0,#0x18]
;;;914      /* Set the USART guard time */
;;;915      USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
000006  8b02              LDRH     r2,[r0,#0x18]
000008  ea422201          ORR      r2,r2,r1,LSL #8
00000c  8302              STRH     r2,[r0,#0x18]
;;;916    }
00000e  4770              BX       lr
;;;917    
                          ENDP


                          AREA ||i.USART_SetPrescaler||, CODE, READONLY, ALIGN=1

                  USART_SetPrescaler PROC
;;;439      */
;;;440    void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
000000  8b02              LDRH     r2,[r0,#0x18]
;;;441    { 
;;;442      /* Check the parameters */
;;;443      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;444      
;;;445      /* Clear the USART prescaler */
;;;446      USARTx->GTPR &= USART_GTPR_GT;
000002  f402427f          AND      r2,r2,#0xff00
000006  8302              STRH     r2,[r0,#0x18]
;;;447      /* Set the USART prescaler */
;;;448      USARTx->GTPR |= USART_Prescaler;
000008  8b02              LDRH     r2,[r0,#0x18]
00000a  430a              ORRS     r2,r2,r1
00000c  8302              STRH     r2,[r0,#0x18]
;;;449    }
00000e  4770              BX       lr
;;;450    
                          ENDP


                          AREA ||i.USART_SmartCardCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardCmd PROC
;;;925      */
;;;926    void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L26.12|
;;;927    {
;;;928      /* Check the parameters */
;;;929      assert_param(IS_USART_1236_PERIPH(USARTx));
;;;930      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;931      if (NewState != DISABLE)
;;;932      {
;;;933        /* Enable the SC mode by setting the SCEN bit in the CR3 register */
;;;934        USARTx->CR3 |= USART_CR3_SCEN;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420220          ORR      r2,r2,#0x20
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L26.22|
                  |L26.12|
;;;935      }
;;;936      else
;;;937      {
;;;938        /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
;;;939        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73df          MOV      r3,#0xffdf
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L26.22|
;;;940      }
;;;941    }
000016  4770              BX       lr
;;;942    
                          ENDP


                          AREA ||i.USART_SmartCardNACKCmd||, CODE, READONLY, ALIGN=1

                  USART_SmartCardNACKCmd PROC
;;;950      */
;;;951    void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
000000  b121              CBZ      r1,|L27.12|
;;;952    {
;;;953      /* Check the parameters */
;;;954      assert_param(IS_USART_1236_PERIPH(USARTx)); 
;;;955      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;956      if (NewState != DISABLE)
;;;957      {
;;;958        /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
;;;959        USARTx->CR3 |= USART_CR3_NACK;
000002  8a82              LDRH     r2,[r0,#0x14]
000004  f0420210          ORR      r2,r2,#0x10
000008  8282              STRH     r2,[r0,#0x14]
00000a  e004              B        |L27.22|
                  |L27.12|
;;;960      }
;;;961      else
;;;962      {
;;;963        /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
;;;964        USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
00000c  8a82              LDRH     r2,[r0,#0x14]
00000e  f64f73ef          MOV      r3,#0xffef
000012  401a              ANDS     r2,r2,r3
000014  8282              STRH     r2,[r0,#0x14]
                  |L27.22|
;;;965      }
;;;966    }
000016  4770              BX       lr
;;;967    
                          ENDP


                          AREA ||i.USART_StructInit||, CODE, READONLY, ALIGN=1

                  USART_StructInit PROC
;;;345      */
;;;346    void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
000000  f44f5116          MOV      r1,#0x2580
;;;347    {
;;;348      /* USART_InitStruct members default value */
;;;349      USART_InitStruct->USART_BaudRate = 9600;
000004  6001              STR      r1,[r0,#0]
;;;350      USART_InitStruct->USART_WordLength = USART_WordLength_8b;
000006  2100              MOVS     r1,#0
000008  8081              STRH     r1,[r0,#4]
;;;351      USART_InitStruct->USART_StopBits = USART_StopBits_1;
00000a  80c1              STRH     r1,[r0,#6]
;;;352      USART_InitStruct->USART_Parity = USART_Parity_No ;
00000c  8101              STRH     r1,[r0,#8]
;;;353      USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
00000e  210c              MOVS     r1,#0xc
000010  8141              STRH     r1,[r0,#0xa]
;;;354      USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
000012  2100              MOVS     r1,#0
000014  8181              STRH     r1,[r0,#0xc]
;;;355    }
000016  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.USART_WakeUpConfig||, CODE, READONLY, ALIGN=1

                  USART_WakeUpConfig PROC
;;;657      */
;;;658    void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
000000  8982              LDRH     r2,[r0,#0xc]
;;;659    {
;;;660      /* Check the parameters */
;;;661      assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;662      assert_param(IS_USART_WAKEUP(USART_WakeUp));
;;;663      
;;;664      USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8182              STRH     r2,[r0,#0xc]
;;;665      USARTx->CR1 |= USART_WakeUp;
00000a  8982              LDRH     r2,[r0,#0xc]
00000c  430a              ORRS     r2,r2,r1
00000e  8182              STRH     r2,[r0,#0xc]
;;;666    }
000010  4770              BX       lr
;;;667    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f2xx_usart_c_9565154b____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___17_stm32f2xx_usart_c_9565154b____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f2xx_usart_c_9565154b____REVSH|
#line 478
|__asm___17_stm32f2xx_usart_c_9565154b____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f2xx_usart_c_9565154b____RRX|
#line 665
|__asm___17_stm32f2xx_usart_c_9565154b____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
