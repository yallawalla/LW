; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\usart.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\output\usart.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\Inc -I..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Pfm6Ctrl\inc\app -I..\..\Pfm6Ctrl\src\wifi -I..\..\..\Utilities\FatFs_R0.09a -I.\RTE\_iap...PFM6 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -D__PFM6__ -DHSE_VALUE=25000000 -DWITH_COM_PORT --omf_browse=.\output\usart.crf ..\Src\usart.c]
                          THUMB

                          AREA ||i.DMA_Configuration||, CODE, READONLY, ALIGN=2

                  DMA_Configuration PROC
;;;45     //______________________________________________________________________________________
;;;46     void 				DMA_Configuration(_io *io)
000000  b510              PUSH     {r4,lr}
;;;47     {
000002  b090              SUB      sp,sp,#0x40
000004  4604              MOV      r4,r0
;;;48     						DMA_InitTypeDef DMA_InitStructure;
;;;49     						DMA_StructInit(&DMA_InitStructure);
000006  a801              ADD      r0,sp,#4
000008  f7fffffe          BL       DMA_StructInit
;;;50     						
;;;51     						RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0588              LSLS     r0,r1,#22
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;52     
;;;53     						DMA_DeInit(DMA2_Stream7);
000014  4824              LDR      r0,|L1.168|
000016  f7fffffe          BL       DMA_DeInit
;;;54     						DMA_InitStructure.DMA_Channel = DMA_Channel_4;
00001a  f04f6000          MOV      r0,#0x8000000
00001e  9001              STR      r0,[sp,#4]
;;;55     						DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART1_DR_Base;
000020  4822              LDR      r0,|L1.172|
000022  9002              STR      r0,[sp,#8]
;;;56     						DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(io->tx->_buf);
000024  6860              LDR      r0,[r4,#4]
000026  6800              LDR      r0,[r0,#0]
000028  9003              STR      r0,[sp,#0xc]
;;;57     						DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
00002a  2040              MOVS     r0,#0x40
00002c  9004              STR      r0,[sp,#0x10]
;;;58     						DMA_InitStructure.DMA_BufferSize = 0;
00002e  2000              MOVS     r0,#0
000030  9005              STR      r0,[sp,#0x14]
;;;59     						DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000032  900a              STR      r0,[sp,#0x28]
;;;60     
;;;61     						DMA_InitStructure.DMA_Priority = DMA_Priority_High;
000034  f44f3000          MOV      r0,#0x20000
000038  900b              STR      r0,[sp,#0x2c]
;;;62     						DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
00003a  2000              MOVS     r0,#0
00003c  9006              STR      r0,[sp,#0x18]
;;;63     						DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
00003e  f44f6080          MOV      r0,#0x400
000042  9007              STR      r0,[sp,#0x1c]
;;;64     						DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
000044  2000              MOVS     r0,#0
000046  9008              STR      r0,[sp,#0x20]
;;;65     						DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000048  9009              STR      r0,[sp,#0x24]
;;;66     
;;;67     						DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
00004a  900e              STR      r0,[sp,#0x38]
;;;68     						DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
00004c  900f              STR      r0,[sp,#0x3c]
;;;69     
;;;70     						DMA_Init(DMA2_Stream7, &DMA_InitStructure);
00004e  a901              ADD      r1,sp,#4
000050  4815              LDR      r0,|L1.168|
000052  f7fffffe          BL       DMA_Init
;;;71     						DMA_Cmd(DMA2_Stream7, ENABLE);
000056  2101              MOVS     r1,#1
000058  4813              LDR      r0,|L1.168|
00005a  f7fffffe          BL       DMA_Cmd
;;;72     
;;;73     						DMA_DeInit(DMA2_Stream2);
00005e  4812              LDR      r0,|L1.168|
000060  3878              SUBS     r0,r0,#0x78
000062  f7fffffe          BL       DMA_DeInit
;;;74     						DMA_InitStructure.DMA_Channel = DMA_Channel_4;
000066  f04f6000          MOV      r0,#0x8000000
00006a  9001              STR      r0,[sp,#4]
;;;75     						DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)USART1_DR_Base;
00006c  480f              LDR      r0,|L1.172|
00006e  9002              STR      r0,[sp,#8]
;;;76     						DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)(io->rx->_buf);
000070  6820              LDR      r0,[r4,#0]
000072  6800              LDR      r0,[r0,#0]
000074  9003              STR      r0,[sp,#0xc]
;;;77     						DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
000076  2000              MOVS     r0,#0
000078  9004              STR      r0,[sp,#0x10]
;;;78     						DMA_InitStructure.DMA_BufferSize = RxBufferSize;
00007a  f44f7000          MOV      r0,#0x200
00007e  9005              STR      r0,[sp,#0x14]
;;;79     						DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000080  1040              ASRS     r0,r0,#1
000082  900a              STR      r0,[sp,#0x28]
;;;80     
;;;81     						DMA_Init(DMA2_Stream2, &DMA_InitStructure);
000084  a901              ADD      r1,sp,#4
000086  4808              LDR      r0,|L1.168|
000088  3878              SUBS     r0,r0,#0x78
00008a  f7fffffe          BL       DMA_Init
;;;82     						DMA_Cmd(DMA2_Stream2, ENABLE);
00008e  2101              MOVS     r1,#1
000090  4805              LDR      r0,|L1.168|
000092  3878              SUBS     r0,r0,#0x78
000094  f7fffffe          BL       DMA_Cmd
;;;83     
;;;84     						USART_DMACmd(USART1, USART_DMAReq_Rx | USART_DMAReq_Tx, ENABLE);
000098  2201              MOVS     r2,#1
00009a  21c0              MOVS     r1,#0xc0
00009c  4803              LDR      r0,|L1.172|
00009e  1f00              SUBS     r0,r0,#4
0000a0  f7fffffe          BL       USART_DMACmd
;;;85     }
0000a4  b010              ADD      sp,sp,#0x40
0000a6  bd10              POP      {r4,pc}
;;;86     //______________________________________________________________________________________
                          ENDP

                  |L1.168|
                          DCD      0x400264b8
                  |L1.172|
                          DCD      0x40011004

                          AREA ||i.Initialize_USART||, CODE, READONLY, ALIGN=2

                  Initialize_USART PROC
;;;96     //______________________________________________________________________________________
;;;97     _io*	 			Initialize_USART(void) {
000000  b500              PUSH     {lr}
000002  b089              SUB      sp,sp,#0x24
;;;98     						GPIO_InitTypeDef 				GPIO_InitStructure;
;;;99     
;;;100    						USART_ClockInitTypeDef  USART_ClockInitStructure;
;;;101    						USART_InitTypeDef 			USART_InitStructure;
;;;102    
;;;103    						__com1=_io_init(RxBufferSize,TxBufferSize);
000004  f44f7100          MOV      r1,#0x200
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       _io_init
00000e  492e              LDR      r1,|L2.200|
000010  6008              STR      r0,[r1,#0]  ; __com1
;;;104    						__com1->put= __putDMA;
000012  482e              LDR      r0,|L2.204|
000014  6809              LDR      r1,[r1,#0]  ; __com1
000016  6108              STR      r0,[r1,#0x10]
;;;105    						__com1->get= __getDMA;	
000018  482d              LDR      r0,|L2.208|
00001a  492b              LDR      r1,|L2.200|
00001c  6809              LDR      r1,[r1,#0]  ; __com1
00001e  60c8              STR      r0,[r1,#0xc]
;;;106    						RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
000020  2101              MOVS     r1,#1
000022  2010              MOVS     r0,#0x10
000024  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107    						RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE);
000028  2101              MOVS     r1,#1
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;108    
;;;109    						GPIO_StructInit(&GPIO_InitStructure);
000030  a807              ADD      r0,sp,#0x1c
000032  f7fffffe          BL       GPIO_StructInit
;;;110    						GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000036  2002              MOVS     r0,#2
000038  f88d0020          STRB     r0,[sp,#0x20]
;;;111    						GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00003c  2000              MOVS     r0,#0
00003e  f88d0022          STRB     r0,[sp,#0x22]
;;;112    						GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000042  2001              MOVS     r0,#1
000044  f88d0023          STRB     r0,[sp,#0x23]
;;;113    	
;;;114    						GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
000048  f44f60c0          MOV      r0,#0x600
00004c  9007              STR      r0,[sp,#0x1c]
;;;115    						GPIO_Init(GPIOA, &GPIO_InitStructure);
00004e  a907              ADD      r1,sp,#0x1c
000050  4820              LDR      r0,|L2.212|
000052  f7fffffe          BL       GPIO_Init
;;;116    						GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);		
000056  2207              MOVS     r2,#7
000058  2109              MOVS     r1,#9
00005a  481e              LDR      r0,|L2.212|
00005c  f7fffffe          BL       GPIO_PinAFConfig
;;;117    						GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);		
000060  2207              MOVS     r2,#7
000062  210a              MOVS     r1,#0xa
000064  481b              LDR      r0,|L2.212|
000066  f7fffffe          BL       GPIO_PinAFConfig
;;;118    												
;;;119    						DMA_Configuration(__com1);
00006a  4817              LDR      r0,|L2.200|
00006c  6800              LDR      r0,[r0,#0]  ; __com1
00006e  f7fffffe          BL       DMA_Configuration
;;;120    						
;;;121    						USART_ClockInitStructure.USART_Clock = USART_Clock_Disable;
000072  2000              MOVS     r0,#0
000074  f8ad0014          STRH     r0,[sp,#0x14]
;;;122    						USART_ClockInitStructure.USART_CPOL = USART_CPOL_Low;
000078  f8ad0016          STRH     r0,[sp,#0x16]
;;;123    						USART_ClockInitStructure.USART_CPHA = USART_CPHA_2Edge;
00007c  f44f7000          MOV      r0,#0x200
000080  f8ad0018          STRH     r0,[sp,#0x18]
;;;124    						USART_ClockInitStructure.USART_LastBit = USART_LastBit_Disable;
000084  2000              MOVS     r0,#0
000086  f8ad001a          STRH     r0,[sp,#0x1a]
;;;125    						USART_ClockInit(USART1, &USART_ClockInitStructure);
00008a  a905              ADD      r1,sp,#0x14
00008c  4812              LDR      r0,|L2.216|
00008e  f7fffffe          BL       USART_ClockInit
;;;126    						
;;;127    						USART_InitStructure.USART_BaudRate = 921600;
000092  f44f2061          MOV      r0,#0xe1000
000096  9001              STR      r0,[sp,#4]
;;;128    						USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000098  2000              MOVS     r0,#0
00009a  f8ad0008          STRH     r0,[sp,#8]
;;;129    						USART_InitStructure.USART_StopBits = USART_StopBits_1;
00009e  f8ad000a          STRH     r0,[sp,#0xa]
;;;130    						USART_InitStructure.USART_Parity = USART_Parity_No;
0000a2  f8ad000c          STRH     r0,[sp,#0xc]
;;;131    						USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000a6  f8ad0010          STRH     r0,[sp,#0x10]
;;;132    						USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0000aa  200c              MOVS     r0,#0xc
0000ac  f8ad000e          STRH     r0,[sp,#0xe]
;;;133    						USART_Init(USART1, &USART_InitStructure);
0000b0  a901              ADD      r1,sp,#4
0000b2  4809              LDR      r0,|L2.216|
0000b4  f7fffffe          BL       USART_Init
;;;134    						USART_Cmd(USART1, ENABLE);
0000b8  2101              MOVS     r1,#1
0000ba  4807              LDR      r0,|L2.216|
0000bc  f7fffffe          BL       USART_Cmd
;;;135    						
;;;136    #if defined (__IOCV1__) || defined (__IOCV2__) 
;;;137    						__com3=_io_init(RxBufferSize,TxBufferSize);
;;;138    						__com3->put= __putISR;
;;;139    						RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC,ENABLE);
;;;140    						RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);
;;;141    						GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
;;;142    						GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;143    						GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART3);		
;;;144    						GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART3);	
;;;145    						
;;;146    						USART_ClockInit(USART3, &USART_ClockInitStructure);
;;;147    						USART_InitStructure.USART_BaudRate = 57600;
;;;148    						USART_Init(USART3, &USART_InitStructure);
;;;149    						USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	
;;;150    {						
;;;151    						NVIC_InitTypeDef NVIC_InitStructure;
;;;152    						NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
;;;153    						NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;154    						NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;155    						NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;156    						NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
;;;157    						NVIC_Init(&NVIC_InitStructure);
;;;158    						USART_Cmd(USART3, ENABLE);
;;;159    }
;;;160    #endif
;;;161    
;;;162    #if defined (__NUCLEO__) 
;;;163    						__com3=_io_init(RxBufferSize,TxBufferSize);
;;;164    						__com3->put= __putISR;
;;;165    						RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
;;;166    						RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);
;;;167    						GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
;;;168    						GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;169    						GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);		
;;;170    						GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);	
;;;171    
;;;172    						USART_ClockInit(USART3, &USART_ClockInitStructure);
;;;173    						USART_InitStructure.USART_BaudRate = 115200;
;;;174    						USART_Init(USART3, &USART_InitStructure);
;;;175    						USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	
;;;176    {						
;;;177    						NVIC_InitTypeDef NVIC_InitStructure;
;;;178    						NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
;;;179    						NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;180    						NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;181    						NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;182    						NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
;;;183    						NVIC_Init(&NVIC_InitStructure);
;;;184    						USART_Cmd(USART3, ENABLE);
;;;185    }
;;;186    #endif
;;;187    						return __com1;
0000c0  4801              LDR      r0,|L2.200|
0000c2  6800              LDR      r0,[r0,#0]  ; __com1
;;;188    }
0000c4  b009              ADD      sp,sp,#0x24
0000c6  bd00              POP      {pc}
;;;189    /*******************************************************************************
                          ENDP

                  |L2.200|
                          DCD      __com1
                  |L2.204|
                          DCD      __putDMA
                  |L2.208|
                          DCD      __getDMA
                  |L2.212|
                          DCD      0x40020000
                  |L2.216|
                          DCD      0x40011000

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;195    *******************************************************************************/
;;;196    void 				USART3_IRQHandler(void) {
000000  b508              PUSH     {r3,lr}
;;;197    int					i;
;;;198    						if(USART_GetFlagStatus(USART3, USART_FLAG_RXNE) != RESET) {
000002  2120              MOVS     r1,#0x20
000004  481a              LDR      r0,|L3.112|
000006  f7fffffe          BL       USART_GetFlagStatus
00000a  b178              CBZ      r0,|L3.44|
;;;199    							i= USART_ReceiveData(USART3);
00000c  4818              LDR      r0,|L3.112|
00000e  f7fffffe          BL       USART_ReceiveData
000012  9000              STR      r0,[sp,#0]
;;;200    							USART_ClearITPendingBit(USART3, USART_IT_RXNE);
000014  f2405125          MOV      r1,#0x525
000018  4815              LDR      r0,|L3.112|
00001a  f7fffffe          BL       USART_ClearITPendingBit
;;;201    							_buffer_push(__com3->rx,&i,1);
00001e  4915              LDR      r1,|L3.116|
000020  6809              LDR      r1,[r1,#0]  ; __com3
000022  2201              MOVS     r2,#1
000024  6808              LDR      r0,[r1,#0]
000026  4669              MOV      r1,sp
000028  f7fffffe          BL       _buffer_push
                  |L3.44|
;;;202    						}
;;;203    						if(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != RESET) {
00002c  2180              MOVS     r1,#0x80
00002e  4810              LDR      r0,|L3.112|
000030  f7fffffe          BL       USART_GetFlagStatus
000034  b1d0              CBZ      r0,|L3.108|
;;;204    							USART_ClearITPendingBit(USART3, USART_IT_TXE);
000036  f2407127          MOV      r1,#0x727
00003a  480d              LDR      r0,|L3.112|
00003c  f7fffffe          BL       USART_ClearITPendingBit
;;;205    							i=0;																																		// tx ready to send
000040  2000              MOVS     r0,#0
000042  9000              STR      r0,[sp,#0]
;;;206    							if(_buffer_pull(__com3->tx,&i,1))																				// if data available
000044  490b              LDR      r1,|L3.116|
000046  6809              LDR      r1,[r1,#0]  ; __com3
000048  2201              MOVS     r2,#1
00004a  6848              LDR      r0,[r1,#4]
00004c  4669              MOV      r1,sp
00004e  f7fffffe          BL       _buffer_pull
000052  b128              CBZ      r0,|L3.96|
;;;207    								USART_SendData(USART3, i);																						// send!
000054  9800              LDR      r0,[sp,#0]
000056  b281              UXTH     r1,r0
000058  4805              LDR      r0,|L3.112|
00005a  f7fffffe          BL       USART_SendData
00005e  e005              B        |L3.108|
                  |L3.96|
;;;208    							else																																		// else
;;;209    								USART_ITConfig(USART3, USART_IT_TXE, DISABLE);												// disable interrupt
000060  2200              MOVS     r2,#0
000062  f2407127          MOV      r1,#0x727
000066  4802              LDR      r0,|L3.112|
000068  f7fffffe          BL       USART_ITConfig
                  |L3.108|
;;;210    						}
;;;211    }
00006c  bd08              POP      {r3,pc}
;;;212    //_________________________________________________________________________________
                          ENDP

00006e  0000              DCW      0x0000
                  |L3.112|
                          DCD      0x40004800
                  |L3.116|
                          DCD      __com3

                          AREA ||i.__getDMA||, CODE, READONLY, ALIGN=2

                  __getDMA PROC
;;;12     //______________________________________________________________________________________
;;;13     int					__getDMA(_buffer *rx) {
000000  b538              PUSH     {r3-r5,lr}
000002  4604              MOV      r4,r0
;;;14     int					i=0;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;15     						if(DMA2_Stream2->NDTR)
000008  480b              LDR      r0,|L4.56|
00000a  6800              LDR      r0,[r0,#0]
00000c  b138              CBZ      r0,|L4.30|
;;;16     							rx->_push=&(rx->_buf[rx->len - DMA2_Stream2->NDTR]);
00000e  490a              LDR      r1,|L4.56|
000010  6960              LDR      r0,[r4,#0x14]
000012  6809              LDR      r1,[r1,#0]
000014  1a40              SUBS     r0,r0,r1
000016  6821              LDR      r1,[r4,#0]
000018  4408              ADD      r0,r0,r1
00001a  6060              STR      r0,[r4,#4]
00001c  e001              B        |L4.34|
                  |L4.30|
;;;17     						else
;;;18     							rx->_push=rx->_buf;
00001e  6820              LDR      r0,[r4,#0]
000020  6060              STR      r0,[r4,#4]
                  |L4.34|
;;;19     						
;;;20     						if(_buffer_pull(rx,&i,1))
000022  2201              MOVS     r2,#1
000024  4669              MOV      r1,sp
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _buffer_pull
00002c  b108              CBZ      r0,|L4.50|
;;;21     							return i;
00002e  9800              LDR      r0,[sp,#0]
                  |L4.48|
;;;22     						else
;;;23     							return EOF;
;;;24     }
000030  bd38              POP      {r3-r5,pc}
                  |L4.50|
000032  f04f30ff          MOV      r0,#0xffffffff        ;23
000036  e7fb              B        |L4.48|
;;;25     //______________________________________________________________________________________
                          ENDP

                  |L4.56|
                          DCD      0x40026444

                          AREA ||i.__putDMA||, CODE, READONLY, ALIGN=2

                  __putDMA PROC
;;;25     //______________________________________________________________________________________
;;;26     int					__putDMA(_buffer *tx, int	c) {
000000  b570              PUSH     {r4-r6,lr}
000002  4602              MOV      r2,r0
;;;27     static			int n=0;
;;;28     
;;;29     						if(DMA2_Stream7->NDTR==0)																					// end of buffer reached
000004  4822              LDR      r0,|L5.144|
000006  6800              LDR      r0,[r0,#0]
000008  b910              CBNZ     r0,|L5.16|
;;;30     							n=0;																														// reset static index
00000a  2000              MOVS     r0,#0
00000c  4b21              LDR      r3,|L5.148|
00000e  6018              STR      r0,[r3,#0]  ; n
                  |L5.16|
;;;31     						if(n == TxBufferSize-1)																						// buffer full ?
000010  4820              LDR      r0,|L5.148|
000012  6800              LDR      r0,[r0,#0]  ; n
000014  f24013ff          MOV      r3,#0x1ff
000018  4298              CMP      r0,r3
00001a  d102              BNE      |L5.34|
;;;32     							return(EOF);	
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L5.32|
;;;33     						
;;;34     						DMA2_Stream7->CR &= ~0x00000001;																	// stream 7 off
;;;35     						while(DMA2_Stream7->CR & 0x00000001);															// wait for HW
;;;36     
;;;37     						DMA2_Stream7->M0AR=(uint32_t)(&tx->_buf[n-DMA2_Stream7->NDTR]);		// set DMA pointer to new character
;;;38     						DMA2_Stream7->NDTR++;																							// increase DMA counter
;;;39     						tx->_buf[n++]=c;																									// enter new character
;;;40     						
;;;41     						DMA2->HIFCR = 0x0F400000;																					// clear all flags
;;;42     						DMA2_Stream7->CR |= 0x00000001;																		// stream 7 on
;;;43     						return(c);
;;;44     }
000020  bd70              POP      {r4-r6,pc}
                  |L5.34|
000022  481b              LDR      r0,|L5.144|
000024  1f00              SUBS     r0,r0,#4              ;34
000026  6800              LDR      r0,[r0,#0]            ;34
000028  f0200001          BIC      r0,r0,#1              ;34
00002c  4b18              LDR      r3,|L5.144|
00002e  1f1b              SUBS     r3,r3,#4              ;34
000030  6018              STR      r0,[r3,#0]            ;34
000032  bf00              NOP                            ;35
                  |L5.52|
000034  4816              LDR      r0,|L5.144|
000036  1f00              SUBS     r0,r0,#4              ;35
000038  6800              LDR      r0,[r0,#0]            ;35
00003a  f0000001          AND      r0,r0,#1              ;35
00003e  2800              CMP      r0,#0                 ;35
000040  d1f8              BNE      |L5.52|
000042  4b13              LDR      r3,|L5.144|
000044  6810              LDR      r0,[r2,#0]            ;37
000046  681b              LDR      r3,[r3,#0]            ;37
000048  4c12              LDR      r4,|L5.148|
00004a  6824              LDR      r4,[r4,#0]            ;37  ; n
00004c  1ae3              SUBS     r3,r4,r3              ;37
00004e  4418              ADD      r0,r0,r3              ;37
000050  4b0f              LDR      r3,|L5.144|
000052  3308              ADDS     r3,r3,#8              ;37
000054  6018              STR      r0,[r3,#0]            ;37
000056  480e              LDR      r0,|L5.144|
000058  6800              LDR      r0,[r0,#0]            ;38
00005a  1c40              ADDS     r0,r0,#1              ;38
00005c  4b0c              LDR      r3,|L5.144|
00005e  6018              STR      r0,[r3,#0]            ;38
000060  480c              LDR      r0,|L5.148|
000062  6814              LDR      r4,[r2,#0]            ;39
000064  6805              LDR      r5,[r0,#0]            ;39  ; n
000066  6800              LDR      r0,[r0,#0]            ;39  ; n
000068  1c40              ADDS     r0,r0,#1              ;39
00006a  4e0a              LDR      r6,|L5.148|
00006c  6030              STR      r0,[r6,#0]            ;39  ; n
00006e  5561              STRB     r1,[r4,r5]            ;39
000070  f04f6074          MOV      r0,#0xf400000         ;41
000074  4b06              LDR      r3,|L5.144|
000076  3bb0              SUBS     r3,r3,#0xb0           ;41
000078  6018              STR      r0,[r3,#0]            ;41
00007a  4805              LDR      r0,|L5.144|
00007c  1f00              SUBS     r0,r0,#4              ;42
00007e  6800              LDR      r0,[r0,#0]            ;42
000080  f0400001          ORR      r0,r0,#1              ;42
000084  4b02              LDR      r3,|L5.144|
000086  1f1b              SUBS     r3,r3,#4              ;42
000088  6018              STR      r0,[r3,#0]            ;42
00008a  4608              MOV      r0,r1                 ;43
00008c  e7c8              B        |L5.32|
;;;45     //______________________________________________________________________________________
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
                          DCD      0x400264bc
                  |L5.148|
                          DCD      n

                          AREA ||i.__putISR||, CODE, READONLY, ALIGN=2

                  __putISR PROC
;;;86     //______________________________________________________________________________________
;;;87     int					__putISR(_buffer *tx, int	c) {
000000  b513              PUSH     {r0,r1,r4,lr}
000002  4604              MOV      r4,r0
;;;88     						if(USART_GetFlagStatus(USART3, USART_FLAG_TXE) != RESET)
000004  2180              MOVS     r1,#0x80
000006  480b              LDR      r0,|L6.52|
000008  f7fffffe          BL       USART_GetFlagStatus
00000c  b128              CBZ      r0,|L6.26|
;;;89     							USART_SendData(USART3, c);	
00000e  9801              LDR      r0,[sp,#4]
000010  b281              UXTH     r1,r0
000012  4808              LDR      r0,|L6.52|
000014  f7fffffe          BL       USART_SendData
000018  e00a              B        |L6.48|
                  |L6.26|
;;;90     						else {
;;;91     							_buffer_push(tx,&c,1);
00001a  2201              MOVS     r2,#1
00001c  a901              ADD      r1,sp,#4
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       _buffer_push
;;;92     							USART_ITConfig(USART3, USART_IT_TXE, ENABLE);
000024  2201              MOVS     r2,#1
000026  f2407127          MOV      r1,#0x727
00002a  4802              LDR      r0,|L6.52|
00002c  f7fffffe          BL       USART_ITConfig
                  |L6.48|
;;;93     						}
;;;94     						return c;
000030  9801              LDR      r0,[sp,#4]
;;;95     }
000032  bd1c              POP      {r2-r4,pc}
;;;96     //______________________________________________________________________________________
                          ENDP

                  |L6.52|
                          DCD      0x40004800

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;219    }
;;;220    int 				fgetc(FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;221    						if(__com1) {
000004  480e              LDR      r0,|L7.64|
000006  6800              LDR      r0,[r0,#0]  ; __com1
000008  b160              CBZ      r0,|L7.36|
;;;222    							int i=__com1->get(__com1->rx);
00000a  4a0d              LDR      r2,|L7.64|
00000c  6812              LDR      r2,[r2,#0]  ; __com1
00000e  6810              LDR      r0,[r2,#0]
000010  4a0b              LDR      r2,|L7.64|
000012  6812              LDR      r2,[r2,#0]  ; __com1
000014  68d1              LDR      r1,[r2,#0xc]
000016  4788              BLX      r1
000018  4604              MOV      r4,r0
;;;223    							if(i != EOF)
00001a  1c60              ADDS     r0,r4,#1
00001c  b108              CBZ      r0,|L7.34|
;;;224    								return i;
00001e  4620              MOV      r0,r4
                  |L7.32|
;;;225    						}
;;;226    						if(__com3)
;;;227    							return __com3->get(__com3->rx);
;;;228    						return EOF;
;;;229    }
000020  bd70              POP      {r4-r6,pc}
                  |L7.34|
000022  bf00              NOP                            ;225
                  |L7.36|
000024  4807              LDR      r0,|L7.68|
000026  6800              LDR      r0,[r0,#0]            ;226  ; __com3
000028  b138              CBZ      r0,|L7.58|
00002a  4a06              LDR      r2,|L7.68|
00002c  6812              LDR      r2,[r2,#0]            ;227  ; __com3
00002e  6810              LDR      r0,[r2,#0]            ;227
000030  4a04              LDR      r2,|L7.68|
000032  6812              LDR      r2,[r2,#0]            ;227  ; __com3
000034  68d1              LDR      r1,[r2,#0xc]          ;227
000036  4788              BLX      r1                    ;227
000038  e7f2              B        |L7.32|
                  |L7.58|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;228
00003e  e7ef              B        |L7.32|
;;;230    #else
                          ENDP

                  |L7.64|
                          DCD      __com1
                  |L7.68|
                          DCD      __com3

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;212    //_________________________________________________________________________________
;;;213    int 				fputc(int c, FILE *f) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;214    						if(__com1)
000006  480c              LDR      r0,|L8.56|
000008  6800              LDR      r0,[r0,#0]  ; __com1
00000a  b138              CBZ      r0,|L8.28|
;;;215    							__com1->put(__com1->tx,c);
00000c  490a              LDR      r1,|L8.56|
00000e  6809              LDR      r1,[r1,#0]  ; __com1
000010  6848              LDR      r0,[r1,#4]
000012  4909              LDR      r1,|L8.56|
000014  6809              LDR      r1,[r1,#0]  ; __com1
000016  690a              LDR      r2,[r1,#0x10]
000018  4621              MOV      r1,r4
00001a  4790              BLX      r2
                  |L8.28|
;;;216    						if(__com3)
00001c  4807              LDR      r0,|L8.60|
00001e  6800              LDR      r0,[r0,#0]  ; __com3
000020  b138              CBZ      r0,|L8.50|
;;;217    						__com3->put(__com3->tx,c);
000022  4906              LDR      r1,|L8.60|
000024  6809              LDR      r1,[r1,#0]  ; __com3
000026  6848              LDR      r0,[r1,#4]
000028  4904              LDR      r1,|L8.60|
00002a  6809              LDR      r1,[r1,#0]  ; __com3
00002c  690a              LDR      r2,[r1,#0x10]
00002e  4621              MOV      r1,r4
000030  4790              BLX      r2
                  |L8.50|
;;;218    						return c;
000032  4620              MOV      r0,r4
;;;219    }
000034  bd70              POP      {r4-r6,pc}
;;;220    int 				fgetc(FILE *f) {
                          ENDP

000036  0000              DCW      0x0000
                  |L8.56|
                          DCD      __com1
                  |L8.60|
                          DCD      __com3

                          AREA ||.data||, DATA, ALIGN=2

                  __com1
                          DCD      0x00000000
                  __com3
                          DCD      0x00000000
                  n
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\Src\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c___getDMA____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___7_usart_c___getDMA____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c___getDMA____REVSH|
#line 478
|__asm___7_usart_c___getDMA____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c___getDMA____RRX|
#line 665
|__asm___7_usart_c___getDMA____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
