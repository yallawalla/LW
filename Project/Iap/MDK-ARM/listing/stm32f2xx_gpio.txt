; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\output\stm32f2xx_gpio.o --asm_dir=.\listing\ --list_dir=.\listing\ --depend=.\output\stm32f2xx_gpio.d --cpu=Cortex-M4 --apcs=interwork -O0 --diag_suppress=9931 -I..\ -I..\Inc -I..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\..\..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\..\Pfm6Ctrl\inc\app -I..\..\Pfm6Ctrl\src\wifi -I..\..\..\Utilities\FatFs_R0.09a -I.\RTE\_iap...PFM6 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F405xx -DUSE_STDPERIPH_DRIVER -DUSE_USB_OTG_FS -D__PFM6__ -DHSE_VALUE=25000000 -DWITH_COM_PORT --omf_browse=.\output\stm32f2xx_gpio.crf ..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;125      */
;;;126    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;127    {
000002  4604              MOV      r4,r0
;;;128      /* Check the parameters */
;;;129      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;130    
;;;131      if (GPIOx == GPIOA)
000004  4835              LDR      r0,|L1.220|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L1.28|
;;;132      {
;;;133        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00001a  e05e              B        |L1.218|
                  |L1.28|
;;;135      }
;;;136      else if (GPIOx == GPIOB)
00001c  4830              LDR      r0,|L1.224|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L1.52|
;;;137      {
;;;138        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000032  e052              B        |L1.218|
                  |L1.52|
;;;140      }
;;;141      else if (GPIOx == GPIOC)
000034  482b              LDR      r0,|L1.228|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L1.76|
;;;142      {
;;;143        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2004              MOVS     r0,#4
00003e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00004a  e046              B        |L1.218|
                  |L1.76|
;;;145      }
;;;146      else if (GPIOx == GPIOD)
00004c  4826              LDR      r0,|L1.232|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L1.100|
;;;147      {
;;;148        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000062  e03a              B        |L1.218|
                  |L1.100|
;;;150      }
;;;151      else if (GPIOx == GPIOE)
000064  4821              LDR      r0,|L1.236|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L1.124|
;;;152      {
;;;153        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2010              MOVS     r0,#0x10
000076  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00007a  e02e              B        |L1.218|
                  |L1.124|
;;;155      }
;;;156      else if (GPIOx == GPIOF)
00007c  481c              LDR      r0,|L1.240|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L1.148|
;;;157      {
;;;158        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2020              MOVS     r0,#0x20
000086  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000092  e022              B        |L1.218|
                  |L1.148|
;;;160      }
;;;161      else if (GPIOx == GPIOG)
000094  4817              LDR      r0,|L1.244|
000096  4284              CMP      r4,r0
000098  d108              BNE      |L1.172|
;;;162      {
;;;163        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  2040              MOVS     r0,#0x40
00009e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  2040              MOVS     r0,#0x40
0000a6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000aa  e016              B        |L1.218|
                  |L1.172|
;;;165      }
;;;166      else if (GPIOx == GPIOH)
0000ac  4812              LDR      r0,|L1.248|
0000ae  4284              CMP      r4,r0
0000b0  d108              BNE      |L1.196|
;;;167      {
;;;168        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  2080              MOVS     r0,#0x80
0000b6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
0000ba  2100              MOVS     r1,#0
0000bc  2080              MOVS     r0,#0x80
0000be  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000c2  e00a              B        |L1.218|
                  |L1.196|
;;;170      }
;;;171      else
;;;172      {
;;;173        if (GPIOx == GPIOI)
0000c4  480d              LDR      r0,|L1.252|
0000c6  4284              CMP      r4,r0
0000c8  d107              BNE      |L1.218|
;;;174        {
;;;175          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  1580              ASRS     r0,r0,#22
0000ce  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;176          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000d2  2100              MOVS     r1,#0
0000d4  15a0              ASRS     r0,r4,#22
0000d6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
                  |L1.218|
;;;177        }
;;;178      }
;;;179    }
0000da  bd10              POP      {r4,pc}
;;;180    
                          ENDP

                  |L1.220|
                          DCD      0x40020000
                  |L1.224|
                          DCD      0x40020400
                  |L1.228|
                          DCD      0x40020800
                  |L1.232|
                          DCD      0x40020c00
                  |L1.236|
                          DCD      0x40021000
                  |L1.240|
                          DCD      0x40021400
                  |L1.244|
                          DCD      0x40021800
                  |L1.248|
                          DCD      0x40021c00
                  |L1.252|
                          DCD      0x40022000

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;187      */
;;;188    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;189    {
000002  460a              MOV      r2,r1
;;;190      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000004  2100              MOVS     r1,#0
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
;;;191    
;;;192      /* Check the parameters */
;;;193      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;194      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;195      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;196      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;197    
;;;198      /* -------------------------Configure the port pins---------------- */
;;;199      /*-- GPIO Mode Configuration --*/
;;;200      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
00000a  bf00              NOP      
00000c  e03d              B        |L2.138|
                  |L2.14|
;;;201      {
;;;202        pos = ((uint32_t)0x01) << pinpos;
00000e  2501              MOVS     r5,#1
000010  fa05f301          LSL      r3,r5,r1
;;;203        /* Get the port pins position */
;;;204        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000014  6815              LDR      r5,[r2,#0]
000016  ea050403          AND      r4,r5,r3
;;;205    
;;;206        if (currentpin == pos)
00001a  429c              CMP      r4,r3
00001c  d134              BNE      |L2.136|
;;;207        {
;;;208          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
00001e  6805              LDR      r5,[r0,#0]
000020  004f              LSLS     r7,r1,#1
000022  2603              MOVS     r6,#3
000024  40be              LSLS     r6,r6,r7
000026  43b5              BICS     r5,r5,r6
000028  6005              STR      r5,[r0,#0]
;;;209          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
00002a  7915              LDRB     r5,[r2,#4]
00002c  004e              LSLS     r6,r1,#1
00002e  40b5              LSLS     r5,r5,r6
000030  6806              LDR      r6,[r0,#0]
000032  4335              ORRS     r5,r5,r6
000034  6005              STR      r5,[r0,#0]
;;;210    
;;;211          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000036  7915              LDRB     r5,[r2,#4]
000038  2d01              CMP      r5,#1
00003a  d002              BEQ      |L2.66|
00003c  7915              LDRB     r5,[r2,#4]
00003e  2d02              CMP      r5,#2
000040  d116              BNE      |L2.112|
                  |L2.66|
;;;212          {
;;;213            /* Check Speed mode parameters */
;;;214            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;215    
;;;216            /* Speed mode configuration */
;;;217            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000042  6885              LDR      r5,[r0,#8]
000044  004f              LSLS     r7,r1,#1
000046  2603              MOVS     r6,#3
000048  40be              LSLS     r6,r6,r7
00004a  43b5              BICS     r5,r5,r6
00004c  6085              STR      r5,[r0,#8]
;;;218            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00004e  7955              LDRB     r5,[r2,#5]
000050  004e              LSLS     r6,r1,#1
000052  40b5              LSLS     r5,r5,r6
000054  6886              LDR      r6,[r0,#8]
000056  4335              ORRS     r5,r5,r6
000058  6085              STR      r5,[r0,#8]
;;;219    
;;;220            /* Check Output mode parameters */
;;;221            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;222    
;;;223            /* Output mode configuration*/
;;;224            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
00005a  6845              LDR      r5,[r0,#4]
00005c  2601              MOVS     r6,#1
00005e  408e              LSLS     r6,r6,r1
000060  43b5              BICS     r5,r5,r6
000062  6045              STR      r5,[r0,#4]
;;;225            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000064  6845              LDR      r5,[r0,#4]
000066  7996              LDRB     r6,[r2,#6]
000068  408e              LSLS     r6,r6,r1
00006a  b2b6              UXTH     r6,r6
00006c  4335              ORRS     r5,r5,r6
00006e  6045              STR      r5,[r0,#4]
                  |L2.112|
;;;226          }
;;;227    
;;;228          /* Pull-up Pull down resistor configuration*/
;;;229          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000070  68c5              LDR      r5,[r0,#0xc]
000072  004f              LSLS     r7,r1,#1
000074  2603              MOVS     r6,#3
000076  40be              LSLS     r6,r6,r7
000078  43b5              BICS     r5,r5,r6
00007a  60c5              STR      r5,[r0,#0xc]
;;;230          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00007c  79d5              LDRB     r5,[r2,#7]
00007e  004e              LSLS     r6,r1,#1
000080  40b5              LSLS     r5,r5,r6
000082  68c6              LDR      r6,[r0,#0xc]
000084  4335              ORRS     r5,r5,r6
000086  60c5              STR      r5,[r0,#0xc]
                  |L2.136|
000088  1c49              ADDS     r1,r1,#1              ;200
                  |L2.138|
00008a  2910              CMP      r1,#0x10              ;200
00008c  d3bf              BCC      |L2.14|
;;;231        }
;;;232      }
;;;233    }
00008e  bdf0              POP      {r4-r7,pc}
;;;234    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;533      */
;;;534    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  b5f0              PUSH     {r4-r7,lr}
;;;535    {
;;;536      uint32_t temp = 0x00;
000002  2300              MOVS     r3,#0
;;;537      uint32_t temp_2 = 0x00;
000004  2400              MOVS     r4,#0
;;;538      
;;;539      /* Check the parameters */
;;;540      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;541      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;542      assert_param(IS_GPIO_AF(GPIO_AF));
;;;543      
;;;544      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  074d              LSLS     r5,r1,#29
000008  0eed              LSRS     r5,r5,#27
00000a  fa02f305          LSL      r3,r2,r5
;;;545      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
00000e  10ce              ASRS     r6,r1,#3
000010  f1000520          ADD      r5,r0,#0x20
000014  f8555026          LDR      r5,[r5,r6,LSL #2]
000018  074e              LSLS     r6,r1,#29
00001a  0ef7              LSRS     r7,r6,#27
00001c  260f              MOVS     r6,#0xf
00001e  40be              LSLS     r6,r6,r7
000020  43b5              BICS     r5,r5,r6
000022  10cf              ASRS     r7,r1,#3
000024  f1000620          ADD      r6,r0,#0x20
000028  f8465027          STR      r5,[r6,r7,LSL #2]
;;;546      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00002c  10ce              ASRS     r6,r1,#3
00002e  f1000520          ADD      r5,r0,#0x20
000032  f8555026          LDR      r5,[r5,r6,LSL #2]
000036  ea450403          ORR      r4,r5,r3
;;;547      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00003a  10ce              ASRS     r6,r1,#3
00003c  f1000520          ADD      r5,r0,#0x20
000040  f8454026          STR      r4,[r5,r6,LSL #2]
;;;548    }
000044  bdf0              POP      {r4-r7,pc}
;;;549    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;260      */
;;;261    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;262    {
;;;263      __IO uint32_t tmp = 0x00010000;
000002  f44f3280          MOV      r2,#0x10000
000006  9200              STR      r2,[sp,#0]
;;;264    
;;;265      /* Check the parameters */
;;;266      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;267      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;268    
;;;269      tmp |= GPIO_Pin;
000008  9a00              LDR      r2,[sp,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  9200              STR      r2,[sp,#0]
;;;270      /* Set LCKK bit */
;;;271      GPIOx->LCKR = tmp;
00000e  9a00              LDR      r2,[sp,#0]
000010  61c2              STR      r2,[r0,#0x1c]
;;;272      /* Reset LCKK bit */
;;;273      GPIOx->LCKR =  GPIO_Pin;
000012  61c1              STR      r1,[r0,#0x1c]
;;;274      /* Set LCKK bit */
;;;275      GPIOx->LCKR = tmp;
000014  9a00              LDR      r2,[sp,#0]
000016  61c2              STR      r2,[r0,#0x1c]
;;;276      /* Read LCKK bit*/
;;;277      tmp = GPIOx->LCKR;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  9200              STR      r2,[sp,#0]
;;;278      /* Read LCKK bit*/
;;;279      tmp = GPIOx->LCKR;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  9200              STR      r2,[sp,#0]
;;;280    }
000020  bd08              POP      {r3,pc}
;;;281    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;328      */
;;;329    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;330    {
;;;331      /* Check the parameters */
;;;332      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;333    
;;;334      return ((uint16_t)GPIOx->IDR);
000002  6908              LDR      r0,[r1,#0x10]
000004  b280              UXTH     r0,r0
;;;335    }
000006  4770              BX       lr
;;;336    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;304      */
;;;305    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;306    {
;;;307      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;308    
;;;309      /* Check the parameters */
;;;310      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;311      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;312    
;;;313      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6913              LDR      r3,[r2,#0x10]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L6.14|
;;;314      {
;;;315        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L6.16|
                  |L6.14|
;;;316      }
;;;317      else
;;;318      {
;;;319        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;320      }
;;;321      return bitstatus;
;;;322    }
000010  4770              BX       lr
;;;323    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;367      */
;;;368    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;369    {
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372    
;;;373      return ((uint16_t)GPIOx->ODR);
000002  6948              LDR      r0,[r1,#0x14]
000004  b280              UXTH     r0,r0
;;;374    }
000006  4770              BX       lr
;;;375    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;343      */
;;;344    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;345    {
;;;346      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;347    
;;;348      /* Check the parameters */
;;;349      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;350      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;351    
;;;352      if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6953              LDR      r3,[r2,#0x14]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L8.14|
;;;353      {
;;;354        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L8.16|
                  |L8.14|
;;;355      }
;;;356      else
;;;357      {
;;;358        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L8.16|
;;;359      }
;;;360      return bitstatus;
;;;361    }
000010  4770              BX       lr
;;;362    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;404      */
;;;405    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;406    {
;;;407      /* Check the parameters */
;;;408      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;409      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;410    
;;;411      GPIOx->BSRRH = GPIO_Pin;
;;;412    }
000002  4770              BX       lr
;;;413    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;385      */
;;;386    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;387    {
;;;388      /* Check the parameters */
;;;389      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;390      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;391    
;;;392      GPIOx->BSRRL = GPIO_Pin;
;;;393    }
000002  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;239      */
;;;240    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;241    {
;;;242      /* Reset GPIO init structure parameters values */
;;;243      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  6001              STR      r1,[r0,#0]
;;;244      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;245      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00000a  7141              STRB     r1,[r0,#5]
;;;246      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;247      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;248    }
000010  4770              BX       lr
;;;249    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;461      */
;;;462    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;463    {
;;;464      /* Check the parameters */
;;;465      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;466    
;;;467      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;468    }
000006  4770              BX       lr
;;;469    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;447      */
;;;448    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;449    {
;;;450      /* Check the parameters */
;;;451      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;452    
;;;453      GPIOx->ODR = PortVal;
;;;454    }
000002  4770              BX       lr
;;;455    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;424      */
;;;425    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L14.6|
;;;426    {
;;;427      /* Check the parameters */
;;;428      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;429      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;430      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;431    
;;;432      if (BitVal != Bit_RESET)
;;;433      {
;;;434        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
000004  e000              B        |L14.8|
                  |L14.6|
;;;435      }
;;;436      else
;;;437      {
;;;438        GPIOx->BSRRH = GPIO_Pin ;
000006  8341              STRH     r1,[r0,#0x1a]
                  |L14.8|
;;;439      }
;;;440    }
000008  4770              BX       lr
;;;441    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_gpio_c_f8e8e39a____REV16|
#line 463 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.4.0\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_stm32f2xx_gpio_c_f8e8e39a____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_gpio_c_f8e8e39a____REVSH|
#line 478
|__asm___16_stm32f2xx_gpio_c_f8e8e39a____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_gpio_c_f8e8e39a____RRX|
#line 665
|__asm___16_stm32f2xx_gpio_c_f8e8e39a____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
